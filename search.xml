<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaCoreTech-02-Java基本程序设计结构01</title>
      <link href="/2021/08/06/javacoretech-02-java-ji-ben-cheng-xu-she-ji-jie-gou-01/"/>
      <url>/2021/08/06/javacoretech-02-java-ji-ben-cheng-xu-she-ji-jie-gou-01/</url>
      
        <content type="html"><![CDATA[<h2 id="Java的基本程序设计结构（1）——示例、注释、数据类型、变量"><a href="#Java的基本程序设计结构（1）——示例、注释、数据类型、变量" class="headerlink" title="Java的基本程序设计结构（1）——示例、注释、数据类型、变量"></a>Java的基本程序设计结构（1）——示例、注释、数据类型、变量</h2><blockquote><p>Java学习笔记系列-02</p><p>《Java核心技术卷I——基础知识》 第3章 Java的基本程序设计结构</p><p>略去：第2章 Java程序设计环境（主要介绍了Java的下载、安装、启动等）</p><p>《Core Java Volume I-Fundamentals(10th Edition) 》 Cay S.Horstmann</p></blockquote><h3 id="1-一个简单的Java应用程序"><a href="#1-一个简单的Java应用程序" class="headerlink" title="1 一个简单的Java应用程序"></a>1 一个简单的Java应用程序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstSample</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"We will not use 'Hello, World!'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Java区分大小写。</li><li>关键字 public 称为访问修饰符(access modifier)，控制程序其他部分对这段代码的访问级別。</li><li>关键字 class 表明 Java 程序中的全部内容都包含在类中。<ul><li>Java 应用程序中的全部内容都必须放置在类中。</li></ul></li><li>Java中定义类名必须以字母开头，后面可以跟字母和数字的任意组合。例：FirstSample<ul><li>标准的命名规范为: 类名是以大写字母开头的名词。多个单词的第一个字母都应该大写。</li><li>骆驼命名法（CamelCase）。</li></ul></li><li>源代码的文件名必须与公共类的名字相同，并用.java作为扩展名。例：FirstSample.java<ul><li>再次提醒大家注意，大小写是非常重要的，千万不能写成firstsample.java</li></ul></li><li>建议：把匹配的大括号上下对齐。</li><li>Java 中的所有函數都属于某个类的方法(标准 术语将其称为方法， 而不是成员函数)。<ul><li>因此， Java 中的 main 方法必须有一个外壳类。</li></ul></li><li>在 Java 中， 每个句子必须用分号结束。</li><li>Java 使用的通用语法是：object.method(parameters)<ul><li>这等价于函数调用。</li></ul></li></ul><h3 id="2-注释"><a href="#2-注释" class="headerlink" title="2 注释"></a>2 注释</h3><ul><li>在 Java 中， 有 3 种标 记注释的方式。</li><li>(1)最常用的方式是使用 //, 其注释内容从 // 开始到本行结尾。</li><li>(2)当需要长篇的注释时，既可以在每行的注释前面标记/，/ 也可以使用/<em>和</em>/将一段比较长的注释括起来。</li><li>(3)最后，第3种注释可以用来自动地生成文档。这种注释以 /**开始，以 */ 结束。  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * This is the first sample program in Core Java Chapter 3 * Aversion 1.01 1997-03-22 * @author Gary Cornell */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstSample</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"We will not use 'Hello, World!'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>警告: 在 Java 中， /* */ 注释不能嵌套。也就是说，不能简单地把代码用 /* 和 */ 括起来<br>作为注释， 因为这段代码本身可能也包含一个 */ .</li></ul></li></ul><h3 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3 数据类型"></a>3 数据类型</h3><ul><li>Java是一种强类型语言。这就意味着必须为每一个变量声明一种类型。</li><li>在Java中，一共共有 8 种基本类型 (primitive type)<ul><li>其中有 4 种整型</li><li>2 种浮点类型</li><li>1 种用于表示 Unicode 编码的字符单元的字符类型char</li><li>1 种用于表示真值的 boolean 类型</li></ul></li><li>注意：大数值 big number 并不是一种新的Java类型，而是一个Java对象。</li></ul><h5 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h5><ul><li><p>整型用于表示没有小数部分的数值，它允许是负数。Java 提供了 4 种整型。</p><ul><li>字节数从少到多依次是：byte，short，int，long</li></ul>  <br><table><thead><tr><th>类型</th><th>存储需求</th><th>取值范围</th></tr></thead><tbody><tr><td>int</td><td>4字节</td><td>-2 147 483 648 ～ 2 147 483 647 ( 正好超过 20 亿 )</td></tr><tr><td>short</td><td>2字节</td><td>-32 768 ～ 32 767</td></tr><tr><td>long</td><td>8字节</td><td>-9223372036854775B08 ～ 9223372036854775807</td></tr><tr><td>byte</td><td>1字节</td><td>-128 ～ 127</td></tr></tbody></table>  <br></li><li><p>在通常情况下，int类型最常用。</p></li><li><p>byte 和 short 类型主要用于特定的应用场合。</p><ul><li>例如，底层的文件处理或者需要控制占用存储空间量的大数组。</li></ul></li><li><p>在 Java 中，整型的范围与运行Java代码的机器无关。</p><ul><li>移植性：这就解决了跨平台/跨操作系统移植带来的诸多问题。</li><li>与此相反， C 和 C++ 程序需要针对不同的处理器选择最为高效的整型<ul><li>这样就有可能造成一个在32位处理器上运行很好的C程序在16位系统上运行却发生整数溢出。</li></ul></li><li>Java 程序必须保证 在所有机器上都能够得到相同的运行结果。</li></ul></li><li><p>长整型数值有一个后缀 L 或 l (如4000000000L) 。</p><ul><li>建议用：大写L，因为小写 l 和 1容易混淆。</li></ul></li><li><p>十六进制数值有一个前缀 Ox 或 0X；如 OxCAFEL 。</p></li><li><p>八进制有一个前缀 0 , 例如，010 对应八进制中的 8。</p><ul><li>显然，八进制表示法比较容易混淆，所以建议最好不要使用八进制常数。</li></ul></li><li><p>从Java 7开始，加上前缀 0b 或 0B 就可以写二进制数。例如，OblOO丨就是 9。</p></li><li><p>另外，同样是从Java 7开始，还可以为数字字面量加下划线</p><ul><li>如用1_000_000(或册1丨丨丨_0100_0丨0 0_丨0 00_0000) 表示一百万。</li><li>这些下划线只是为丫让人更易读。Java 编译器会去除这些下划线。</li></ul></li><li><p><strong>注意，Java 没有任何无符号(unsigned) 形式的 int、long、short 或 byte 类型。</strong></p></li></ul><h5 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h5><ul><li><p>浮点类型用于表示有小数部分的数值。在 Java 中有两种浮点类型。</p><br><table><thead><tr><th>类型</th><th>存储需求</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>大约 ± 3.402 823 47E+38F (有效位数为 6 ~ 7 位)</td></tr><tr><td>double</td><td>8字节</td><td>大约 ± 1.797 693 134 862 315 70E+308 (有效位数为 15 位)</td></tr></tbody></table><br></li><li><p>double 表示这种类型的数值精度是 float 类型的两倍(有人称之为双精度数值)。</p></li><li><p><strong>绝大部分应用程序都采用 double 类型。</strong></p><ul><li>在很多情况下， float 类型的精度很难满足需求。</li><li>实际上，只有很少的情况适合使用 float 类型。例如，需要单精度数据的库，或者需要存储大量数据。</li></ul></li><li><p>float类型的数值有一个后缀F或f (例如，3.14F)</p><ul><li><strong>没有后缀F的浮点数值(如3.14) 默 认为 double 类型。</strong></li><li>当然，也可以在浮点数值后面添加后缀 D 或 d (例如，3.14D)。</li></ul></li><li><p>下面是用于表示溢出和出错情况的3个特殊的浮点数值。例如，一个正整数处以0的结果为正无穷大。计算0/0或者负数的平方根结果为NaN。</p><ul><li>正无穷大；常量Double_POSITIVE_INFINITY</li><li>负无穷大；Double.NEGATIVEJNFINITY</li><li>NaN（不是一个数字）；Double.NaN ( 以及相应的 Float 类型的常量)</li></ul></li><li><p>特别说明：</p><ul><li>不能这样检测一个特定值是否等于Double.NaN：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token class-name">Double<span class="token punctuation">.</span>NaN</span><span class="token punctuation">)</span> <span class="token comment">// is never true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>所有“ 非数值” 的值都认为是不相同的。 然而， 可以使用 Double.isNaN 方法:<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// check whether x is "not a number"  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>警告:浮点数值不适用于无法接受舍入误差的金融计算中。</p><ul><li>例如，命令System.out.println ( 2.0-1.1 ) 将打印出 0.8999999999999999, 而不是人们想象的 0.9。</li><li>这种舍入误差的主要 原因是浮点数值采用二进制系统表示， 而在二进制系统中无法精确地表示分数 1/10。</li><li>这就好像十进制无法精确地表示分数 1/3 —样。</li><li>如果在数值计算中不允许有任何舍入误差，就应该使用 BigDecimal 类。</li></ul></li></ul><h5 id="char-类型"><a href="#char-类型" class="headerlink" title="char 类型"></a>char 类型</h5><ul><li><strong>警告： 我们强烈建议不要在程序中使用 char 类型， 除非确实需要处理 UTF-16 代码单元。最好 将字符串作为抽象数据类型处理。</strong></li><li>在 Java 中， char 类型描述了 UTF-16 编码中的一个代码单元。</li><li>char 类型原本用于表示单个字符。<ul><li>不过， 现在情况已经有所变化。</li><li>如今， 有些 Unicode 字符可以用一个 char 值描述， 另外一些 Unicode 字符则需要两个 char 值。</li></ul></li><li>char 类型的字面量值要用单引号括起来。<ul><li>例如: W 是编码值为 65 所对应的字符常量。</li><li>它与”A”不同，”A”是包含一个字符A的字符串。</li><li>char类型的值可以表示为十六进制值，其范围从 \u0000 到 \Uffff 例如 W2122 表示注册符号 (TM), \u03C0 表示希腊字母pai。</li></ul></li></ul><h5 id="Unicode和char类型"><a href="#Unicode和char类型" class="headerlink" title="Unicode和char类型"></a>Unicode和char类型</h5><ul><li>从 Java SE 5.0 开 始。 码 点 ( code point ) 是指与一个编码表中的某个字符对应的代码值。</li><li>在 Unicode 标准中， 码点采用十六进制书写，并加上前缀U+, 例如U+0041就是拉丁字母A的码点。</li><li>Unicode的 码点可以分成 17 个代码级别(codeplane)。</li><li>第一个代码级别称为基本的多语言级别(basic multilingual plane ), 码点从 U+0000 到 U+FFFF , 其中包括经典的 Unicode 代码;</li><li>其余的 16 个级别码点从U+10000到U+10FFFF, 其中包括一些辅助字符(supplementary character)。</li><li>UTF-16 编码采用不同长度的编码表示所有 Unicode 码点。</li><li>在基本的多语言级别中， 每个字符用16位表示，通常被称为代码单元(codeunit);</li><li>而辅助字符采用一对连续的代码单元进行编码。</li><li>这样构成的编码值落人基本的多语言级别中空闲的 2048 字节内， 通常被称为替代区域(surrogate area) [U+D800 ~ U+DBFF 用于第一个代码单兀，U+DC00 ~ U+DFFF 用 于第二个代码单元]。</li><li>这样设计十分巧妙，我们可以从中迅速地知道一个代码单元是一个字 符的编码，还是一个辅助字符的第一或第二部分。</li></ul><h5 id="boolean-类型"><a href="#boolean-类型" class="headerlink" title="boolean 类型"></a>boolean 类型</h5><ul><li>boolean ( 布尔)类型有两个值: false 和 true , 用来判定逻辑条件。</li><li>整型值和布尔值之间不能进行相互转换。</li><li>C++注释：在C++中，数值甚至指针可以代替boolean值。值0相当于布尔值false, 非 0 值相当于布尔值 true , 在 Java 中则不是这样，因此， Java 程序员不会遇到下述麻烦:  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// oops... meant x = 0</span><span class="token comment">// 在 C++ 中这个测试可以编译运行， 其结果总是 false:。</span><span class="token comment">// 而在 Java 中， 这个测试将不 能通过编译， 其原因是整数表达式 x = 0 不能转换为布尔值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>在Java中， 每个变量都有一个类型(type)。</li><li>在声明变量时，变量的类型位于变量名之前。 这里列举一些声明变量的示例:  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> salary<span class="token punctuation">;</span><span class="token keyword">int</span> vacationDays<span class="token punctuation">;</span> <span class="token keyword">long</span> earthPopulation<span class="token punctuation">;</span> <span class="token keyword">boolean</span> done<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>可以看到， 每个声明以分号结束。 由于声明是一条完整的 Java 语句， 所以必须以分号结束。</li><li>变量名必须是一个以字母开头并由字母或数字构成的序列。</li><li>需要注意，与大多数程序设计语言相比，Java中“字母”和“数字”的范围更大。</li><li>字母包括’A’~’Z’、’a1’ ~’z’、’_’、’$’’ 或在某种语言中表示字母的任何 Unicode 字符。</li><li>例如，希腊人可以用 pai。同样，数字包括 0 ~ 9 和在某种语言中表示数字的任何 Unicode 自字符。</li><li>但是 ‘+’这样的富豪不能出现在变量名中，空格也不行。</li><li>变量名中所有的字符都是有意义的，并且大小写敏感。</li><li>变量名的长度基本上没有限制。</li><li>提示: 如果想要知道哪些 Unicode 字符属于 Java 中的“ 字母”， 可以使用 Character 类的 isJavaldentifierStart 和 isJavaldentifierPart 方法来检查。</li><li>不能使用 Java 保留字作为变量名。</li><li>可以在一行中声明多个变量。不过，不提倡使用这种风格。逐一声明每一个变量可以提高程序的可读性。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span> <span class="token comment">// both are integers</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h5></li><li>声明一个变量之后，必须用赋值语句对变量进行显式初始化，千万不要使用未初始化的变量。</li><li>例如， Java 编译器认为下面的语句序列是错误的:<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> vacationDays<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vacationDays<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment">// ERROR variable not initialized</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>要想对一个已经声明过的变量进行赋值， 就需要将变量名放在等号(=) 左侧， 相应取值 的 Java 表达式放在等号的右侧。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> vacationDays<span class="token punctuation">;</span> vacationDays <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>也可以将变量的声明和初始化放在同一行中。 例如:<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> vacationDays <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>在 Java 中可以将声明放在代码中的任何地方。</li><li>在 Java 中， 变量的声明尽可能地靠近变量第一次使用的地方， 这是一种良好的程序编写 风格。</li></ul><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><ul><li><p>在 Java 中， 利用关键字 final 指示常量。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Constants</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">double</span> CM_PER_INCH <span class="token operator">=</span> <span class="token number">2.54</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> paperWidth <span class="token operator">=</span> <span class="token number">8.5</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> paperHeight <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        <span class="token comment">//System.out.println("hello");</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Paper size in centimeters:"</span>                <span class="token operator">+</span> paperWidth <span class="token operator">*</span> CM_PER_INCH <span class="token operator">+</span> <span class="token string">" by "</span> <span class="token operator">+</span> paperHeight <span class="token operator">*</span> CM_PER_INCH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>关键字 final 表示这个变量只能被赋值一次。一旦被赋值之后， 就不能够再更改了。</p></li><li><p>习惯上, 常量名使用全大写。</p></li><li><p>在 Java 中， 经常希望某个常量可以在一个类中的多个方法中使用， 通常将这些常量称为类常量。</p></li><li><p>可以使用关键字 static final 设置一个类常量。 下面是使用类常量的示例:</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Constants2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> CM_PER_INCH <span class="token operator">=</span> <span class="token number">2.54</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">double</span> paperWidth <span class="token operator">=</span> <span class="token number">8.5</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> paperHeight <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">,</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Paper size in centimeters: "</span>            <span class="token operator">+</span> paperWidth <span class="token operator">*</span> CM_PER_INCH <span class="token operator">+</span> <span class="token string">" by "</span> <span class="token operator">+</span> paperHeight <span class="token operator">*</span> CM_PER_INCH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>需要注意， 类常量的定义位于 main方法的外部。 因此， 在同一个类的其他方法中也可 以使用这个常量。</li><li>而且， 如果一个常量被声明为 public，那么其他类的方法也可以使用这个常量。 在这个示例中，Constants2.CM_PER-INCH 就是这样一个常童。</li><li>C++ 注释: const 是 Java 保留的关键字， 但目前并没有使用。 在 Java 中， 必须使用 final 定义常量。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaCoreTech-01-Java关键特性</title>
      <link href="/2021/08/06/javacoretech-01-java-guan-jian-te-xing/"/>
      <url>/2021/08/06/javacoretech-01-java-guan-jian-te-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="Java关键特性"><a href="#Java关键特性" class="headerlink" title="Java关键特性"></a>Java关键特性</h2><blockquote><p>Java学习笔记系列-01</p><p>《Java核心技术卷I——基础知识》 第1章 Java程序设计概述</p><p>《Core Java Volume I-Fundamentals(10th Edition) 》 Cay S.Horstmann</p><p>Java “白皮书”的关键术语</p></blockquote><h3 id="1-简单性"><a href="#1-简单性" class="headerlink" title="1 简单性"></a>1 简单性</h3><ul><li>Java是C++语法的一个”纯净版本</li><li>简单的另一方面是小。基本的解释器以及类支持大约仅40KB，再加上基础的标准类库和线程支持大约增加175KB。</li></ul><h3 id="2-面向对象"><a href="#2-面向对象" class="headerlink" title="2 面向对象"></a>2 面向对象</h3><ul><li>面向对象是一种程序设计技术。它将重点放在数据（即对象）和对象的接口上。</li></ul><h3 id="3-分布式"><a href="#3-分布式" class="headerlink" title="3 分布式"></a>3 分布式</h3><ul><li>Java又一个丰富的例程库，用于处理像HTTP和FTP之类的TCP/IP协议。</li><li>Java应用程序能够通过URL打开和访问网络上的对象，其便捷程度就好像访问本地文件一样。</li></ul><h3 id="4-健壮性"><a href="#4-健壮性" class="headerlink" title="4 健壮性"></a>4 健壮性</h3><ul><li>Java的设计目标之一在于使得Java编写的程序具有多方面的可靠性。</li><li>Java投入了大量的精力进行早起的问题检测、后期动态的检测，并消除了容易出错的情况。</li><li>Java和C++最大的不同在于Java采用的指针模型可以消除重写内存和损坏数据的可能性。</li><li>Java编译器能够检测出许多在其他语言中仅在运行时才能够检测出来的问题。</li></ul><h3 id="5-安全性"><a href="#5-安全性" class="headerlink" title="5 安全性"></a>5 安全性</h3><ul><li>Java可以适用于网络/分布式环境。使用Java可以构建防病毒、防篡改的系统。</li><li>从一开始，Java就设计成能够防范各种工具，包括：<ul><li>运行时堆栈溢出。如蠕虫和病毒常用的攻击手段。</li><li>破坏自己的进程空间之外的内存。</li><li>未经授权读写文件。</li></ul></li><li>Java的安全模型很复杂</li></ul><h3 id="体系结构中立"><a href="#体系结构中立" class="headerlink" title="体系结构中立"></a>体系结构中立</h3><ul><li>编译器生成一个体系结构中立的目标文件格式。</li><li>只要有Java运行时系统，这些编译后的代码可以在学多处理器上运行。</li><li>Java编译器通过生成与特定的计算机体系结构无关的字节码指令来实现这一特性。</li></ul><h3 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h3><ul><li>与C和C++不同，Java规范中没有”依赖具体实现”的地方。基本数据类型的大小以及有关运算都做了明确的说明。</li><li>例如，Java中的int永远为32位的整数，而在C/C++中，int可能是16位整数、32位整数，也可能是编译器提供商指定的其他大小。</li><li>在Java中，数据类型具有固定的大小，这消除了代码移植时令人头痛的主要问题。</li><li>二进制数据以固定的格式进行存储和传输，消除了字节顺序的困扰。</li><li>字符串是用标准的Unicode格式存储的。</li><li>除了与用户界面相关的部分外，所有其他Java库都能很好地支持平台独立性。</li><li>你可以处理文件、正则表达式、XML、日期和时间、数据库、网络连接、线程等，而不用操心底层操作系统。</li></ul><h3 id="解释型"><a href="#解释型" class="headerlink" title="解释型"></a>解释型</h3><ul><li>Java解释器可以在任何移植了解释器的机器上执行Java字节码。</li><li>由于链接是一个增量式且轻量级的过程，所以，开发过程也变得更加快捷，更加具有探索性。</li></ul><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><ul><li>字节码可以（在运行时刻）动态地翻译成对应运行这个应用的特定的CPU的机器码。</li><li>性能就是”适用性更强”。</li></ul><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul><li>多线程可以带来更好的交互响应和实时行为。</li><li>Java在当时很超前。它是第一个支持并发程序设计的主流语言。</li></ul><h3 id="动态性"><a href="#动态性" class="headerlink" title="动态性"></a>动态性</h3><ul><li>从各种角度看，Java与C或C++相比更加具有动态性。它能够适应不断发展的环境。</li><li>库中可以自由地添加新方法和实例变量，而对客户端却没有任何影响。</li><li>在Java中找出运行时类型信息十分简单。</li></ul><h3 id="关于Java的常见误解"><a href="#关于Java的常见误解" class="headerlink" title="关于Java的常见误解"></a>关于Java的常见误解</h3><ul><li>1.Java是HTML的扩展。<ul><li>Java是一种程序设计语言；HTML是一种描述网页结构的方式。</li><li>两者基本没有任何共同之处。</li></ul></li><li>2.使用XML，所以不需要Java。<ul><li>Java是一种程序设计语言；XML是一种描述数据的方式。</li><li>可以使用任何一种程序设计语言处理XML数据，而Java API对XML处理提供了很好地支持。</li></ul></li><li>3.Java是一种非常容易学习的程序设计语言。<ul><li>像Java这种功能强大的语言大都不太容易学习。</li><li>首先，必须将编写玩具式程序的轻松和 开发实际项目的艰难区分开来。</li><li>Java类库包含了数千种类和接口以及数万个函数。要想Java解决实际问题，还是需要了解不少内容的。</li></ul></li><li>4.Java将成为适用于所有平台的通用性编程语言<ul><li>从理论上讲，这是完全有可能的。</li><li>但在实际中，某些领域其他语言有更出色的表现。</li><li>Objective C和后来的Swift在iOS设备上就有着无可取代的地位，</li><li>浏览器中的处理几乎完全由JavaScript掌控。</li><li>Windows程序通常都用C++或C#编写。</li><li>Java在服务器端编程和跨平台客户端应用领域则很有优势。</li></ul></li><li>5.Java只不过是另外一种程序设计语言<ul><li>Java是一种很好的程序设计语言，很多程序设计人员喜欢Java胜过C、C++或C#。</li><li>程序设计语言的成功更多地取决于其支撑系统的能力，而不是优美的语法。</li><li>人们主要关注: 是否提供了易于实现某些功能的易用、便捷和标准的库? 是否有开发工具提供商能建立强大的编程和调试环境? 语言和工具集是否能够与其他计算基础架构整合在 一起?</li><li>Java的成功源于其类库能够让人们轻松地完成原本有一定难度的事情。例如:联网 Web 应用和并发。</li><li>Java减少了指针错误，这是一个额外的好处，因此使用Java编程的效率更高。但这些并不是Java成功的全部原因。</li></ul></li><li>6.Java是专用的，应该避免使用<ul><li>根据GPL,任何人都可以得到专利许可，允许其使用和修改Java,不过仅限于桌面和服务器平台。</li></ul></li><li>7.Java是解释型的，因此对于关键的应用程序速度太慢了<ul><li>早期的Java是解释型的。</li><li>现在Java虚拟机使用了即时编译器，因此采用Java编写的“ 热点”代码其运行速度与C++相差无几，有些情况下甚至更快。</li></ul></li><li>8.所有的Java程序都是在网页中运行的。<ul><li>所有的Java applet都是在网页浏览器中运行的。这也恰恰是applet的定义，即一种在浏览器中运行的Java程序。</li><li>然而，大多数Java程序是运行在Web浏览器之外的独立应用程序。实际上，很多Java程序都在Web服务器上运行并生成用于网页的代码。</li></ul></li><li>9.Java程序是主要的安全风险<ul><li>尽管距离Java诞生已经20年之久，与其他常用的执行平台相比，Java还是安全得多。</li></ul></li><li>10.JavaScript是Java的简易版<ul><li>JavaScript是一种在网页中使用的脚本语言，它是由Netscape发明的，原来的名字叫做LiveScript。</li><li>JavaScript的语法类似 Java,除此之外两者无任何关系当然名字有些相像。</li></ul></li><li>11.使用Java可以用廉价的Internet设备取代桌面计算机<ul><li>一些公司已经生产出Java网络计算机的原型。</li><li>不过用户还不打算放弃功能强大而便利的桌面计算机，而去使用没有本地存储而且功能有限的网络设备。 </li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《影响力密码》学习笔记</title>
      <link href="/2021/08/01/ying-xiang-li-mi-ma-xue-xi-bi-ji/"/>
      <url>/2021/08/01/ying-xiang-li-mi-ma-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="影响力密码"><a href="#影响力密码" class="headerlink" title="影响力密码"></a>影响力密码</h1><p><img src="/postimages/introduction-to-code-of-influence.png" alt="影响力密码核心要点"></p><p>完整笔记请参考文末。</p><h2 id="核心要点概述"><a href="#核心要点概述" class="headerlink" title="核心要点概述"></a>核心要点概述</h2><p><strong>影响力的定义：在不运用权力（或没有权力）的情况下，以间接的方式产生效果的能力。</strong></p><h3 id="1-明确目标"><a href="#1-明确目标" class="headerlink" title="1.明确目标"></a>1.明确目标</h3><ul><li>PASS模型</li></ul><h3 id="2-识别关键"><a href="#2-识别关键" class="headerlink" title="2.识别关键"></a>2.识别关键</h3><ul><li>SPA、情景模拟</li></ul><h3 id="3-分析阻力"><a href="#3-分析阻力" class="headerlink" title="3.分析阻力"></a>3.分析阻力</h3><ul><li>基本归因错误</li><li>8大维度阻力分析（能力、意愿 + 自身、人际、组织、物理）</li></ul><h3 id="4-施加影响"><a href="#4-施加影响" class="headerlink" title="4.施加影响"></a>4.施加影响</h3><ul><li>8大维度施加影响</li></ul><h2 id="一、明确目标"><a href="#一、明确目标" class="headerlink" title="一、明确目标"></a>一、明确目标</h2><h3 id="影响人、实现事：PASS模型"><a href="#影响人、实现事：PASS模型" class="headerlink" title="影响人、实现事：PASS模型"></a>影响人、实现事：PASS模型</h3><ul><li><p>People 影响对象</p><ul><li><p>3D地图</p><ul><li>Decision 决策层</li><li>Deploy 协调层</li><li>Do 执行层</li></ul></li></ul></li><li><p>Value 价值意义</p><ul><li><p>价值轮</p><ul><li>互赖关系</li><li>情感账户</li><li>个人认同</li><li>能力/便利</li><li>物质激励</li><li>上级赏识</li><li>平级价值</li><li>管理下级</li></ul></li></ul></li><li><p>Specific 具体量化</p><ul><li><p>量化指标</p><ul><li>显性化</li></ul></li><li><p>起名字 3+3</p><ul><li>突显核心价值、易传播、易记忆</li><li>谐音梗、打比方、用数字</li></ul></li><li><p>仪式感 5W</p><ul><li>Way、Who、When、Where、What</li></ul></li></ul></li><li><p>Schedule 时间规划</p><ul><li><p>远期时间</p><ul><li>减少抵触感</li></ul></li><li><p>近期时间</p><ul><li>增加紧迫感</li></ul></li></ul></li></ul><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ul><li><p>其实，你是一个导演！</p><ul><li>要注重事前布局，梳理好演员表和出场顺序</li></ul></li></ul><h2 id="二、识别关键"><a href="#二、识别关键" class="headerlink" title="二、识别关键"></a>二、识别关键</h2><h3 id="三大关键点：SPA"><a href="#三大关键点：SPA" class="headerlink" title="三大关键点：SPA"></a>三大关键点：SPA</h3><ul><li><p>Key Step 关键环节</p><ul><li><p>APEC流程模型</p><ul><li><p>Activate 启动</p><ul><li>论证拍板</li><li>明事定人</li><li>启动项目</li></ul></li><li><p>Plan 计划</p><ul><li>收集建议</li><li>制定方案</li><li>试点验证</li><li>优化方案</li></ul></li><li><p>Excute 执行</p><ul><li>赋能激励</li><li>落地实施</li><li>跟踪进展</li></ul></li><li><p>Close 收尾</p><ul><li>达成结果</li><li>奖罚复盘</li></ul></li></ul></li><li><p>关键环节识别矩阵</p><ul><li>在影响人方面是否关键</li><li>在推动事方面是否关键</li></ul></li></ul></li><li><p>Key Person 关键人</p><ul><li><p>3D地图</p><ul><li><p>Decision 决策层</p><ul><li>拍板决策</li></ul></li><li><p>Deploy 协调层</p><ul><li>横向协调</li></ul></li><li><p>Do 执行层</p><ul><li>具体执行</li></ul></li></ul></li><li><p>PAIR模型</p><ul><li>Power 职权资源</li><li>Ability 能力资源</li><li>Information 信息资源</li><li>Relationship 人际资源</li></ul></li></ul></li><li><p>Key Action 关键行动</p><ul><li><p>3D地图</p></li><li><p>3层关键行动列表</p><ul><li><p>执行层</p><ul><li>执行落地</li><li>正向宣传</li><li>反馈信息</li></ul></li><li><p>协调层</p><ul><li>协调资源</li><li>分享信息</li><li>广泛搭桥</li></ul></li><li><p>决策层</p><ul><li><p>最小化决策层工作量、最大化决策层影响力</p></li><li><p>九项关键行动</p><ul><li>拍板</li><li>挂帅</li><li>表态</li><li>指派</li><li>资源</li><li>授权</li><li>过问</li><li>分享</li><li>发奖</li></ul></li></ul></li></ul></li><li><p>情景模拟法</p><ul><li><p>第一步：画流程图，画出各个节点环节图</p></li><li><p>第二步：各自找关键点、每个人分别贴出你认为的SPA关键点</p><ul><li>不要集体讨论、要独立找</li></ul></li><li><p>第三步：汇总关键点：分享你的SPA关键点分析图，其他成员补充建议完善</p></li></ul></li></ul></li></ul><h2 id="三、分析阻力"><a href="#三、分析阻力" class="headerlink" title="三、分析阻力"></a>三、分析阻力</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li><p>原理1：基本归因错误</p><ul><li>大多数时候，人们习惯从动机和个性这两个角度来看待和评论他人，而不是从更全面的角度来考虑。</li></ul></li><li><p>原理2：人们的行为主要受自身及他们所处环境的影响</p></li></ul><h3 id="八大维度阻力分析"><a href="#八大维度阻力分析" class="headerlink" title="八大维度阻力分析"></a>八大维度阻力分析</h3><ul><li><p>自身意愿方面的阻力</p><ul><li>认为没有意义和价值，或者觉得是在添麻烦</li></ul></li><li><p>自身能力方面的阻力</p><ul><li>不具备相关能力</li></ul></li><li><p>人际因素对被影响者意愿造成的阻力</p><ul><li>周围人不鼓励被影响者去做</li></ul></li><li><p>人际因素对被影响者能力造成的阻力</p><ul><li>周围人没有给被影响者提供帮助</li></ul></li><li><p>组织因素对被影响者意愿造成的阻力</p><ul><li>公司的激励考核也使得被影响者不愿意去推动事情</li></ul></li><li><p>组织因素对被影响者能力造成的阻力</p><ul><li>公司的工具不好用、流程或缺失或复杂</li></ul></li><li><p>物理因素对被影响者意愿造成的阻力</p><ul><li>物理空间环境对被影响者造成危险或者让其厌恶</li></ul></li><li><p>物理因素对被影响者能力造成的阻力</p><ul><li>物理空间环境影响能力发挥</li></ul></li></ul><h3 id="阻力分析的三种用法"><a href="#阻力分析的三种用法" class="headerlink" title="阻力分析的三种用法"></a>阻力分析的三种用法</h3><ul><li>事前：评估难度、制定预案</li><li>事中：识别实际阻力</li><li>事后：总结经验</li></ul><h2 id="四、施加影响"><a href="#四、施加影响" class="headerlink" title="四、施加影响"></a>四、施加影响</h2><h3 id="1-对被影响者的自身意愿施加影响"><a href="#1-对被影响者的自身意愿施加影响" class="headerlink" title="1-对被影响者的自身意愿施加影响"></a>1-对被影响者的自身意愿施加影响</h3><ul><li><p>认同意义和价值</p></li><li><p>2种模式</p><ul><li>感性方法：目睹-感受-改变</li><li>理性方法：分析-思考-改变</li></ul></li><li><p>方法1：目睹</p><ul><li>确定目睹对象：相关性</li><li>引发情感共鸣：冲击性</li><li>5种目睹对象：客户、供应商、替代产品、同行竞争者、新进入者</li><li>正面案例、反面案例</li><li>广义目睹：视频、图片、声音</li><li>引发共鸣：超出常规认知、形成强烈对比</li></ul></li><li><p>方法2：感受-亲自体验</p><ul><li>行为尝试 + 先易后难</li><li>1-行为改变认知</li><li>2-系统脱敏疗疗法</li></ul></li><li><p>方法3：理性共识会</p><ul><li><p>表达理解</p></li><li><p>认清形势</p><ul><li>重点突出后果和收益，且最好关联到被影响者个人</li></ul></li><li><p>形成共识</p></li><li><p>解决方案</p></li></ul></li></ul><h3 id="2-对被影响者的能力施加影响"><a href="#2-对被影响者的能力施加影响" class="headerlink" title="2-对被影响者的能力施加影响"></a>2-对被影响者的能力施加影响</h3><ul><li><p>方法1：减法-降低难度</p><ul><li>拆分-化难为易</li><li>聚焦-减轻负担</li><li>形象-易于理解</li></ul></li><li><p>方法2：加法-提升能力</p><ul><li><p>组织相关培训</p></li><li><p>唤醒成功经验</p><ul><li>注意找典型绩优样本</li></ul></li><li><p>管理未来预期</p></li></ul></li></ul><h3 id="3-通过人际因素对被影响者的意愿施加影响"><a href="#3-通过人际因素对被影响者的意愿施加影响" class="headerlink" title="3-通过人际因素对被影响者的意愿施加影响"></a>3-通过人际因素对被影响者的意愿施加影响</h3><ul><li><p>找到能影响被影响者的人鼓励、带动被影响者去做</p></li><li><p>方法1：管理者-以身作则</p><ul><li>言行影响方向、九项关键行动</li></ul></li><li><p>方法2：意见领袖-传递正能量</p><ul><li>公开表态、管理预期</li><li>意见领袖一定要找，一方面是效果大、另一方面是要防止变成反面意见领袖</li></ul></li><li><p>方法3：树立榜样</p><ul><li><p>确立人们在组织中的行为规范</p></li><li><p>巧妙选择</p><ul><li>选择正向榜样、和大家差不多的普通人</li></ul></li><li><p>建立规范</p></li><li><p>扩大宣传</p></li></ul></li><li><p>方法4：专项小组-上传下达</p><ul><li>直接互惠、间接互惠</li></ul></li><li><p>方法5：消极传播者-消除影响源</p><ul><li>转化 + 转移</li></ul></li></ul><h3 id="4-通过人际因素对被影响者的能力施加影响"><a href="#4-通过人际因素对被影响者的能力施加影响" class="headerlink" title="4-通过人际因素对被影响者的能力施加影响"></a>4-通过人际因素对被影响者的能力施加影响</h3><ul><li><p>借助人际的力量为被影响者提供帮助</p></li><li><p>方法1：求助渠道</p><ul><li>分级求助</li></ul></li><li><p>方法2：定期群策群力</p></li><li><p>方法3：互助组</p><ul><li>让被影响者之间互相帮助</li></ul></li><li><p>方法4：外包</p></li><li><p>方法5：外部专家协助</p></li></ul><h3 id="5-通过组织因素对被影响者的意愿施加影响"><a href="#5-通过组织因素对被影响者的意愿施加影响" class="headerlink" title="5-通过组织因素对被影响者的意愿施加影响"></a>5-通过组织因素对被影响者的意愿施加影响</h3><ul><li><p>设定恰当的激励和考核机制</p></li><li><p>方法1：加入或调整KPI</p></li><li><p>方法2：阶段性激励</p><ul><li>内部荣誉</li><li>冠名权</li><li>职位</li><li>提高优先级</li><li>外部荣誉</li><li>奖励家属</li></ul></li><li><p>方法3：取得和展示阶段性积极成果</p><ul><li>展示成果-仪式感</li><li>进行激励-及时感</li><li>展望成功-认同感</li></ul></li><li><p>方法4：引入竞赛机制</p><ul><li>决策层定期看到排名</li></ul></li><li><p>方法5：沉没成本激励法</p><ul><li>收集付出的成本</li><li>发现激励时机</li><li>展示沉没成本</li></ul></li></ul><h3 id="6-通过组织因素对被影响者的能力施加影响"><a href="#6-通过组织因素对被影响者的能力施加影响" class="headerlink" title="6-通过组织因素对被影响者的能力施加影响"></a>6-通过组织因素对被影响者的能力施加影响</h3><ul><li><p>提供好用的工具和优化的流程</p></li><li><p>广义工具</p><ul><li><p>思路方法</p></li><li><p>知识库</p></li><li><p>软件</p></li><li><p>硬件</p></li><li><p>资源（非钱的资源）</p><ul><li>外部资源：置换资源</li><li>收集资源供方</li><li>分析双方需求</li><li>构建置换模式</li></ul></li></ul></li><li><p>优化流程</p><ul><li><p>开通绿色通道</p></li><li><p>扩大专项授权</p></li><li><p>降低学习成本</p></li><li><p>对标优化流程</p><ul><li>1-选定标杆</li><li>2-内部流程梳理</li><li>3-标杆流程分析</li><li>4-对标找到关键优化点</li><li>5-学习运用</li></ul></li></ul></li></ul><h3 id="7-通过物理因素对被影响者的意愿施加影响"><a href="#7-通过物理因素对被影响者的意愿施加影响" class="headerlink" title="7-通过物理因素对被影响者的意愿施加影响"></a>7-通过物理因素对被影响者的意愿施加影响</h3><ul><li><p>环境暗示</p><ul><li>原理：破窗理论</li></ul></li><li><p>环境暗示-五觉感知-激活行为</p></li><li><p>视觉</p><ul><li>环境饰物、标志标语、大小、空间布局、光线、颜色</li></ul></li><li><p>听觉</p><ul><li><p>巧用节拍</p><ul><li>四二拍：简单欢快； 四三拍：平稳、明快</li></ul></li><li><p>巧用音高</p><ul><li>中间区：简约自信；次高音：热情洋溢</li></ul></li></ul></li><li><p>触觉</p><ul><li><p>增加触觉</p><ul><li>硬、粗糙的表面稳定、重视</li><li>重要资料打印出来、纸张厚</li></ul></li><li><p>巧用形状</p><ul><li>方形：激发人们认同规则</li><li>圆形：激发人们创新想法</li><li>开会可按需选择</li></ul></li></ul></li><li><p>嗅觉</p><ul><li>使用花香：薰衣草香能增加信任感</li></ul></li><li><p>味觉</p><ul><li>使用甜味：巧克力、喜茶、蛋糕</li></ul></li></ul><h3 id="8-通过物理因素对被影响者的能力施加影响"><a href="#8-通过物理因素对被影响者的能力施加影响" class="headerlink" title="8-通过物理因素对被影响者的能力施加影响"></a>8-通过物理因素对被影响者的能力施加影响</h3><ul><li><p>环境辅助，原理：</p><ul><li>为人们提供行动线索</li><li>为什么消除行动障碍</li></ul></li><li><p>方法1：视觉指引</p></li><li><p>方法2：声音指引</p></li><li><p>方法3：空间优化</p><ul><li><p>清除障碍</p></li><li><p>空间临近</p><ul><li>增加接触机会、沟通互动</li></ul></li></ul></li><li><p>工具靠近人</p></li></ul><h2 id="学习感悟"><a href="#学习感悟" class="headerlink" title="学习感悟"></a>学习感悟</h2><h5 id="我们要以一个真诚、正直的心态来使用这些方法！"><a href="#我们要以一个真诚、正直的心态来使用这些方法！" class="headerlink" title="我们要以一个真诚、正直的心态来使用这些方法！"></a>我们要以一个真诚、正直的心态来使用这些方法！</h5><h5 id="在推动项目的过程里，要充分地调动和发挥决策层的影响力，决策层可以进行九项关键行动"><a href="#在推动项目的过程里，要充分地调动和发挥决策层的影响力，决策层可以进行九项关键行动" class="headerlink" title="在推动项目的过程里，要充分地调动和发挥决策层的影响力，决策层可以进行九项关键行动"></a>在推动项目的过程里，要充分地调动和发挥决策层的影响力，决策层可以进行九项关键行动</h5><ul><li>要点：以最小成本、发挥最大影响力</li><li>关键节点要请决策层领导出来讲两句</li></ul><h5 id="推动事情进展除了行政手段以外，还可以有多种多样的方式通过提升影响力来推动。"><a href="#推动事情进展除了行政手段以外，还可以有多种多样的方式通过提升影响力来推动。" class="headerlink" title="推动事情进展除了行政手段以外，还可以有多种多样的方式通过提升影响力来推动。"></a>推动事情进展除了行政手段以外，还可以有多种多样的方式通过提升影响力来推动。</h5><h5 id="说服别人可以从价值轮进行分析、加上施加影响的8大维度，从而从空洞无物变为合情合理、有理有据。"><a href="#说服别人可以从价值轮进行分析、加上施加影响的8大维度，从而从空洞无物变为合情合理、有理有据。" class="headerlink" title="说服别人可以从价值轮进行分析、加上施加影响的8大维度，从而从空洞无物变为合情合理、有理有据。"></a>说服别人可以从价值轮进行分析、加上施加影响的8大维度，从而从空洞无物变为合情合理、有理有据。</h5><h5 id="参考书籍：王明伟《影响力密码：打开协作中的锁》"><a href="#参考书籍：王明伟《影响力密码：打开协作中的锁》" class="headerlink" title="参考书籍：王明伟《影响力密码：打开协作中的锁》"></a>参考书籍：王明伟《影响力密码：打开协作中的锁》</h5><p><img src="/postimages/code-of-influence.png" alt="影响力密码完整笔记"></p>]]></content>
      
      
      <categories>
          
          <category> 团队协作与管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Work </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Godoc In China</title>
      <link href="/2021/08/01/godoc-in-china/"/>
      <url>/2021/08/01/godoc-in-china/</url>
      
        <content type="html"><![CDATA[<h2 id="如何在国内查看Golang文档"><a href="#如何在国内查看Golang文档" class="headerlink" title="如何在国内查看Golang文档"></a>如何在国内查看Golang文档</h2><p>如何在国内查看Golang文档，一直是困扰已久的问题，通过摸索汇总了以下几种方法：</p><h3 id="【推荐】方法一：在本地启动godoc服务"><a href="#【推荐】方法一：在本地启动godoc服务" class="headerlink" title="【推荐】方法一：在本地启动godoc服务"></a>【推荐】方法一：在本地启动godoc服务</h3><p>本地执行以下命令，然后就可以在浏览器访问： <a href="http://localhost:8888/">http://localhost:8888</a>.</p><pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">godoc -http=:8888<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="方法二：还是用godoc，但是本地直接利用-godoc-命令"><a href="#方法二：还是用godoc，但是本地直接利用-godoc-命令" class="headerlink" title="方法二：还是用godoc，但是本地直接利用 godoc 命令"></a>方法二：还是用godoc，但是本地直接利用 godoc 命令</h3><ul><li>本地可以通过 godoc 命令直接来查看相关文档。<pre class="line-numbers language-none"><code class="language-none"># 查看 godoc 用法$ godoc# 查看某个package用法$ godoc pkg_name # eg: godoc math# 以上会直接输出到终端，如果想要写入到文件里更方便查看，也很简单$ godoc math &gt; file_godoc_math# 查看某个package的某个函数的用法$ godoc math Absfunc Abs(x float64) float64    Abs returns the absolute value of x.    Special cases are:Abs(±Inf) = +InfAbs(NaN) = NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="方法三：下载godoc到本地"><a href="#方法三：下载godoc到本地" class="headerlink" title="方法三：下载godoc到本地"></a>方法三：下载godoc到本地</h3><p><a href="https://github.com/astaxie/godoc">https://github.com/astaxie/godoc</a></p><h3 id="方法四：“科学上网”，然后访问：https-golang-org-doc"><a href="#方法四：“科学上网”，然后访问：https-golang-org-doc" class="headerlink" title="方法四：“科学上网”，然后访问：https://golang.org/doc/"></a>方法四：“科学上网”，然后访问：<a href="https://golang.org/doc/">https://golang.org/doc/</a></h3><h3 id="文章推荐：Go语言究竟好在哪里？"><a href="#文章推荐：Go语言究竟好在哪里？" class="headerlink" title="文章推荐：Go语言究竟好在哪里？"></a>文章推荐：Go语言究竟好在哪里？</h3><p><a href="https://www.infoq.cn/article/jqrMtm15lmCP_lNCJPk3">https://www.infoq.cn/article/jqrMtm15lmCP_lNCJPk3</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>参考资料</title>
      <link href="/2021/08/01/can-kao-zi-liao/"/>
      <url>/2021/08/01/can-kao-zi-liao/</url>
      
        <content type="html"><![CDATA[<h1 id="liukgg-github-io"><a href="#liukgg-github-io" class="headerlink" title="liukgg.github.io"></a>liukgg.github.io</h1><p>LK’s Blog, welcome to <a href="https://liukgg.github.io/">https://liukgg.github.io</a>!</p><h3 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h3><ul><li><a href="https://github.com/liukgg/liukgg.github.io/blob/master/golang/godoc-in-China.md">2019-2-2 国内如何看Golang的文档</a></li><li><a href="https://guides.github.com/features/mastering-markdown/">2019-1-26 Markdown语法</a></li></ul><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><h5 id="技术类"><a href="#技术类" class="headerlink" title="技术类"></a>技术类</h5><ul><li>Java</li><li>Ruby</li><li>Golang</li><li>K8s &amp; Docker</li><li>Shell</li><li>其他：Tracing(Jaeger/Zipkin), Prometheus, Grafana, Istio, etc.</li><li>数据库<ul><li>MySQL</li><li>MongoDB</li><li>Redis</li></ul></li></ul><h5 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h5><ul><li>人生感悟</li><li>学习成长</li><li>技术管理</li><li>招聘面试</li></ul>]]></content>
      
      
      <categories>
          
          <category> 参考资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reference </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/01/hello-world/"/>
      <url>/2021/08/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 参考资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reference </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
